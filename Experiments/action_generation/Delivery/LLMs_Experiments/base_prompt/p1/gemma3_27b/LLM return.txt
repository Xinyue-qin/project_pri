Okay, here's the complete PDDL domain definition for the 'delivery' 
domain, based on your allowed predicates and the specified actions 
(pick-up, move, drop-off).  I'll include the domain header, type 
definitions, and the action definitions.

```pddl
(define (domain delivery)
  (:requirements :strips :typing)
  (:types agent location package)

  (:predicates
    (at ?a - agent ?l - location)
    (has ?a - agent ?p - package)
    (in ?p - package ?l - location)
    (connected ?from ?to - location)
    (requested ?p - package ?dest - location)
    (delivered ?p - package)
    (available ?a - agent)
  )

  (:action pick-up
    :parameters (?a - agent ?p - package ?l - location)
    :precondition (and
                    (at ?a ?l)
                    (in ?p ?l)
                    (requested ?p ?l)
                    (available ?a)
                  )
    :effect (and
              (has ?a ?p)
              (not (in ?p ?l))
              (not (available ?a))
              (not (requested ?p ?l))
            )
  )

  (:action move
    :parameters (?a - agent ?from - location ?to - location)
    :precondition (and
                    (at ?a ?from)
                    (connected ?from ?to)
                  )
    :effect (and
              (not (at ?a ?from))
              (at ?a ?to)
            )
  )

  (:action drop-off
    :parameters (?a - agent ?p - package ?dest - location)
    :precondition (and
                    (at ?a ?dest)
                    (has ?a ?p)
                    (requested ?p ?dest)
                  )
    :effect (and
              (not (has ?a ?p))
              (in ?p ?dest)
              (delivered ?p)
              (available ?a)
            )
  )
)
```

**Explanation:**

*   **`(define (domain delivery))`**:  This line defines the beginning of 
the domain description named "delivery".
*   **`(:requirements :strips :typing)`**: Specifies that the domain uses 
the STRIPS language and typing.
*   **`(:types agent location package)`**: Defines the types of objects 
within the domain.
*   **`(:predicates ...)`**:  Lists all the predicates that can be used to 
describe the state of the world. These are exactly the ones you provided.
*   **`(:action ...)`**: Defines each action. Each action includes:
    *   **`:parameters`**: The objects that the action takes as input.
    *   **`:precondition`**:  The conditions that must be true for the 
action to be executed.  Uses `and` to combine multiple conditions.
    *   **`:effect`**:  The changes to the world state that occur when the 
action is executed. Uses `not` to remove predicates from the state.

**Key Points:**

*   **STRIPS Assumptions:**  This PDDL uses the STRIPS (Stanford Research 
Institute Problem Solver) assumptions:
    *   **Closed World:**  Anything not explicitly stated to be true is 
assumed to be false.
    *   **No Conditional Effects:**  Effects are always applied; there are 
no conditional effects (e.g., "if condition, then effect").
    *   **Atomic Effects:** Each effect adds or deletes only one predicate 
at a time.

This PDDL defines a basic delivery domain, allowing a planner to find 
sequences of actions (pick-up, move, drop-off) to deliver packages to 
their destinations.  Let me know if you'd like any modifications or 
additions to this domain definition!
