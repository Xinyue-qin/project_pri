Consider this domain description:

(define (domain blocksworld-4ops)
  (:requirements :strips)

  ;; Predicates
  (:predicates
    (arm-empty)
    (holding ?x - block)
    (clear ?x - block)
    (on ?x - block ?y - block)
    (on-table ?x - block)
  )

  ;; Action: putdown
  (:action putdown
    :parameters (?x - block)
    :precondition (and (holding ?x))
    :effect (and
              (not (holding ?x))
              (arm-empty)
              (clear ?x)
              (on-table ?x)
            )
  )

  ;; Action: pickup
  (:action pickup
    :parameters (?x - block)
    :precondition (and (arm-empty) (clear ?x) (on-table ?x))
    :effect (and
              (not (arm-empty))
              (holding ?x)
              (not (clear ?x))
            )
  )

  ;; Action: stack
  (:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and
              (not (holding ?x))
              (arm-empty)
              (on ?x ?y)
              (clear ?x)
              (not (clear ?y))
            )
  )

  ;; Action: unstack
  (:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (arm-empty) (on ?x ?y) (clear ?x))
    :effect (and
              (not (arm-empty))
              (holding ?x)
              (clear ?y)
              (not (on ?x ?y))
            )
  )
)

And this problem associated to it:

(define (problem complex-rearrange)
  (:domain blocksworld-4ops)
  (:objects A B C D - block)
  (:init (arm-empty) (on B A) (clear B) (on D C) (clear D))
  (:goal (and (on A B) (on B C) (on C D) (on-table D))))


The planning task is unsolvable due to an incomplete initial state description. Can you provide an alternative initial state in PDDL from which the goals are achievable? This state must not include the goals directly.