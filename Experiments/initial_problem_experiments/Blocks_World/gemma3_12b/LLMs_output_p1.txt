You've correctly identified the problem. The initial state lacks crucial 
information needed to solve the simple stack goal.  Specifically, it lacks 
the `arm-empty` predicate, which is essential for any action to be 
possible.  Let's construct an achievable initial state.

Here's a revised initial state that allows for a solution:

```pddl
(define (problem simple-stack)
  (:domain blocksworld-4ops)
  (:objects A B C - block)
  (:init (on-table A) (on-table B) (on-table C)
         (clear A) (clear B) (clear C)
         (arm-empty)) ;Crucially add arm-empty
  (:goal (and (on A B) (on B C) (on-table C))))
```

**Explanation of the Change:**

*   **(arm-empty):** This predicate is the single addition. The initial 
state *must* specify that the arm is initially empty for any actions 
(pickup, unstack) to be possible. Without this, the planning algorithm has 
no way to start.

**Why this works:**

With the `arm-empty` predicate included, a planner can now execute the 
following sequence (a possible solution):

1.  `pickup A`:  This action is possible because `arm-empty`, `clear A`, 
and `on-table A` are all true.
2.  `stack A B`: This action is possible because the arm is holding A and 
B is clear.
3.  `pickup B`: This action is possible because the arm is empty, clear B, 
and on-table B.
4.  `stack B C`: This action is possible because the arm is holding B and 
C is clear.
5.  `putdown A`

This solution achieves the goal of stacking A on B, B on C and leaving C 
on the table. This will result in a valid and solvable plan.