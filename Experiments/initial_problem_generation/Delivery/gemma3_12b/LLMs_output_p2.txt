You're right to point out the problem â€“ the robot needs to start 
somewhere! The current initial state only defines the locations of the 
packages and their requested destinations. Here's a revised initial state 
that allows for a solvable plan:

```pddl
(:init
  (in pkgA loc1)(in pkgB loc2)
  (connected loc1 loc2)(connected loc2 loc3)
  (requested pkgA loc3)(requested pkgB loc1)
  (available robot2)
  (at robot2 loc1)  ; Robot starts at loc1
)
```

**Explanation of Change:**

*   **(at robot2 loc1)**: This crucial addition places the robot `robot2` 
at location `loc1`. The `move` and `pick-up` actions require the robot to 
be somewhere initially.

**Reasoning for Solvability:**

With this new initial state, a plan can be formulated.  Here's a possible 
outline:

1.  `pick-up(robot2 pkgA loc1)`
2.  `move(robot2 loc1 loc3)`
3.  `drop-off(robot2 pkgA loc3)`
4.  `move(robot2 loc3 loc1)`
5.  `pick-up(robot2 pkgB loc1)`
6.  `move(robot2 loc1 loc1)`
7.  `drop-off(robot2 pkgB loc1)`

This plan would deliver both packages and satisfy the goal.

**Important Note:**  The optimal plan might vary depending on the specific 
requirements (e.g., minimizing travel time). However, the added `(at 
robot2 loc1)` ensures that the plan is at least possible.  The initial 
choice of `loc1` as the starting location is arbitrary; starting the robot 
at `loc2` would also lead to a solvable plan, but require a different 
sequence of actions.