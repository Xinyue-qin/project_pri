Here's an alternative initial state in PDDL that makes the problem 
solvable, building on the original while providing the missing 
information:

```pddl
(:init
  (connected locA locB)
  (requested pkg1 locB)
  (available robot1)
  (at robot1 locA)
  (in pkg1 locA)
)
```

**Explanation of the changes:**

The original initial state was missing crucial information:

*   **Robot's initial location:** The robot needs to be *at* a location to 
start.  I've added `(at robot1 locA)`.
*   **Package's initial location:** The package needs to be *in* a 
location to be picked up. I've added `(in pkg1 locA)`.

By adding these two facts, the robot and package are placed at the same 
initial location (`locA`), allowing the plan to proceed: the robot can 
pick up the package, move to `locB`, and drop it off. This satisfies the 
goal `(delivered pkg1)`.

The revised initial state doesn't *directly* state the goal; it just sets 
up the scenario where the goal can be achieved through a series of 
actions.
